{"version":3,"sources":["../../src/MapWrapper.tsx","../../src/MapFormField.tsx","ExampleForm.tsx","App.tsx","index.tsx"],"names":["styles","mapInputWidget","position","top","left","height","width","display","gridTemplateRows","zIndex","mapContainer","gridRow","mapSubmitButton","MapWrapper","props","useState","map","setMap","featuresLayer","setFeaturesLayer","gjson","mapElement","useRef","mapRef","createMap","useCallback","center","transform","theMap","Map","target","layers","Tile","source","OSM","view","View","projection","zoom","controls","addDrawInteraction","layer","Vector","style","Style","stroke","Stroke","color","image","Circle","radius","fill","Fill","draw","Draw","type","modify","Modify","parsedFeatures","dataProjection","featureProjection","useEffect","initialMap","ref","variant","onClick","features","transFeatures","geometry","feature","console","newFeature","geojFeatures","rightHanded","MapFormField","field","form","showMap","setShowMap","drawnFeatures","setDrawnFeatures","window","featureType","callbackFn","theFeatures","React","className","ExampleForm","initialValues","point","polygon","linestring","onSubmit","values","actions","log","setSubmitting","formProps","id","name","component","JSON","stringify","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40da70cd.chunk.js","sourcesContent":["/*\n * Copyright 2021 Macquarie University\n *\n * Licensed under the Apache License Version 2.0 (the, \"License\");\n * you may not use, this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied.\n * See, the License, for the specific language governing permissions and\n * limitations under the License.\n *\n * Filename: MapWrapper.tsx\n * Description:\n *   Internals of map generation for MapFormField\n */\nimport React, { useState, useEffect, useRef, useCallback } from 'react'\n\n// openlayers\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport TileLayer from 'ol/layer/Tile'\nimport VectorLayer from 'ol/layer/Vector'\nimport VectorSource from 'ol/source/Vector'\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style'\nimport { Draw, Modify } from 'ol/interaction'\nimport OSM from 'ol/source/OSM'\nimport { Feature } from 'ol'\nimport { transform } from 'ol/proj'\n\nimport Button, { ButtonProps } from '@material-ui/core/Button'\nimport GeoJSON from 'ol/format/GeoJSON'\n\ntype FeaturesType = Feature<any>[] | undefined\ninterface MapProps extends ButtonProps {\n  features: any\n  featureType: 'Point' | 'Polygon' | 'LineString'\n  zoom: number\n  center: Array<number>\n  callbackFn: (features: FeaturesType) => void\n}\n\nconst styles = {\n  mapInputWidget: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    height: '100vh',\n    width: '100%',\n    display: 'grid',\n    gridTemplateRows: '1fr 100px',\n    zIndex: 100\n  },\n  mapContainer: {\n    gridRow: 1\n  },\n  mapSubmitButton: {\n    gridRow: 2\n  }\n} as const\n\nfunction MapWrapper(props: MapProps) {\n  // set intial state\n  const [map, setMap] = useState<Map | undefined>()\n  const [featuresLayer, setFeaturesLayer] =\n    useState<VectorLayer<VectorSource<any>>>()\n\n  const gjson = new GeoJSON()\n\n  // pull refs\n  const mapElement = useRef<HTMLDivElement>(null)\n\n  // create state ref that can be accessed in OpenLayers onclick callback function\n  //  https://stackoverflow.com/a/60643670\n  const mapRef = useRef<Map | undefined>()\n  mapRef.current = map\n\n  const createMap = useCallback(\n    (element: HTMLElement, props: MapProps): Map => {\n      const mapProjection = 'EPSG:3857'\n      const center = transform(props.center, 'EPSG:4326', mapProjection)\n\n      const theMap = new Map({\n        target: element,\n        layers: [\n          new TileLayer({ source: new OSM() })\n          // featuresLayer\n        ],\n        view: new View({\n          projection: mapProjection,\n          center: center,\n          zoom: props.zoom\n        }),\n        controls: []\n      })\n\n      theMap.getView().setCenter(center)\n\n      return theMap\n    },\n    []\n  )\n\n  const addDrawInteraction = useCallback(\n    (map: Map, props: MapProps) => {\n      const source = new VectorSource()\n\n      const layer = new VectorLayer({\n        source: source,\n        style: new Style({\n          stroke: new Stroke({\n            color: '#33ff33',\n            width: 4\n          }),\n          image: new CircleStyle({\n            radius: 7,\n            fill: new Fill({ color: '#33ff33' })\n          })\n        })\n      })\n      const draw = new Draw({\n        source: source,\n        type: props.featureType || 'Point'\n      })\n      const modify = new Modify({\n        source: source\n      })\n\n      // add features to map if we're passed any in\n      if (props.features && props.features.type) {\n        const parsedFeatures = gjson.readFeatures(props.features, {\n          dataProjection: 'EPSG:4326',\n          featureProjection: map.getView().getProjection()\n        })\n\n        source.addFeatures(parsedFeatures)\n      }\n\n      // setDrawInteraction(draw)\n\n      map.addLayer(layer)\n      map.addInteraction(draw)\n      map.addInteraction(modify)\n      setFeaturesLayer(layer)\n\n      draw.on('drawstart', () => {\n        // clear any existing features if we start drawing again\n        // could allow up to a fixed number of features\n        // here by counting\n        source.clear()\n      })\n    },\n    [setFeaturesLayer]\n  )\n\n  // initialize map on first render\n  useEffect(() => {\n    // don't do this if we have already made a map\n    if (!map) {\n      // create and add vector source layer containing the passed in features\n      if (mapElement.current) {\n        // create map\n        const initialMap = createMap(mapElement.current, props)\n        addDrawInteraction(initialMap, props)\n        setMap(initialMap)\n      }\n    }\n  }, [map, createMap, addDrawInteraction, props])\n\n  const submitAction = () => {\n    if (featuresLayer) {\n      const features = featuresLayer.getSource().getFeatures()\n\n      if (map) {\n        const transFeatures: Array<Feature<any>> = []\n        features.forEach((feature) => {\n          const geometry = feature\n            .getGeometry()\n            .clone()\n            .transform(map.getView().getProjection(), 'EPSG:4326')\n          console.log(\n            feature.getGeometry().flatCoordinates,\n            geometry.flatCoordinates\n          )\n          const newFeature = feature.clone()\n          newFeature.setGeometry(geometry)\n          transFeatures.push(newFeature)\n        })\n        const geojFeatures = gjson.writeFeaturesObject(transFeatures, {\n          dataProjection: 'EPSG:4326',\n          rightHanded: true\n        })\n\n        props.callbackFn(geojFeatures)\n        featuresLayer.getSource().clear()\n      }\n    }\n  }\n\n  // render component\n  return (\n    <div style={styles.mapInputWidget}>\n      <div ref={mapElement} style={styles.mapContainer} />\n      <Button\n        type='button'\n        variant='outlined'\n        color='primary'\n        style={styles.mapSubmitButton}\n        onClick={submitAction}\n      >\n        Submit\n      </Button>\n    </div>\n  )\n}\n\nexport default MapWrapper\n","/*\n * Copyright 2021 Macquarie University\n *\n * Licensed under the Apache License Version 2.0 (the, \"License\");\n * you may not use, this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied.\n * See, the License, for the specific language governing permissions and\n * limitations under the License.\n *\n * Filename: MapFormField.tsx\n * Description:\n *   Implement MapFormField for entry of data via maps in FAIMS\n */\n\nimport React, { useState } from 'react'\nimport Feature from 'ol/Feature'\nimport './MapFormField.css'\nimport MapWrapper from './MapWrapper'\nimport Button from '@material-ui/core/Button'\nimport { FieldProps } from 'formik'\n\ninterface MapFieldProps extends FieldProps {\n  featureType: 'Point' | 'Polygon' | 'LineString'\n  center?: Array<number>\n  zoom?: number\n}\n\nfunction MapFormField({ field, form, ...props }: MapFieldProps) {\n  const [showMap, setShowMap] = useState(false)\n  const [drawnFeatures, setDrawnFeatures] = useState<Array<Feature<any>>>([])\n\n  let zoom = 12\n  let center = [151.11224773567673, -33.773807355279104]\n\n  if (props.zoom) {\n    zoom = props.zoom\n  }\n\n  if (props.center) {\n    center = props.center\n  }\n\n  const mapCallback = (theFeatures: any) => {\n    setDrawnFeatures(theFeatures)\n    setShowMap(false)\n\n    form.setFieldValue(field.name, theFeatures)\n  }\n\n  if (showMap) {\n    window.scrollTo(0, 0)\n    return (\n      <div>\n        <MapWrapper\n          featureType={props.featureType}\n          features={drawnFeatures}\n          zoom={zoom}\n          center={center}\n          callbackFn={mapCallback}\n        />\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <Button\n          variant='contained'\n          className='map-button'\n          onClick={() => setShowMap(true)}\n        >\n          Get {props.featureType}\n        </Button>\n      </div>\n    )\n  }\n}\n\nexport { MapFormField }\n","import React from 'react';\nimport { Field, Form, Formik } from 'formik';\nimport {MapFormField} from 'faims3-map-input'\nimport Button from '@material-ui/core/Button'\nimport './ExampleForm.css'\n\nconst ExampleForm = () => {\n\n  const center = [151.21409960967713,-33.85543752567224]\n\n  return (\n      <Formik\n        initialValues={{ point: {}, polygon: {}, linestring: {} }}\n        onSubmit={(values: any, actions: any) => {\n            console.log(values)\n            actions.setSubmitting(false);\n        }}\n      >\n        {(formProps) => (\n          <div id=\"demoformcontainer\">\n            <div id=\"theform\">\n                  <h1>Test Form</h1>\n          <Form>\n            <Field name=\"point\" center={center} featureType=\"Point\" component={MapFormField} />\n\n            <Field name=\"polygon\" zoom={10} featureType=\"Polygon\" component={MapFormField} />\n\n            <Field name=\"linestring\" featureType=\"LineString\" component={MapFormField} />\n\n            <Button variant='contained' color='primary' type=\"submit\">Submit</Button>\n          </Form>\n\n            </div>\n              <div id=\"formvaluedisplay\">\n                <pre>\n                {JSON.stringify(formProps.values, null, 2)}\n                </pre>\n              </div>\n              </div>\n        )}\n      </Formik>\n)\n};\n\n\nexport default ExampleForm;","\nimport React from 'react';\nimport './App.css';\nimport ExampleForm from './ExampleForm';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <ExampleForm />\n    </div>\n  );\n}\n\nexport default App;","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}
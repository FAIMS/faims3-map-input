{"version":3,"sources":["../../src/MapWrapper.tsx","../../src/MapFormField.tsx","ExampleForm.tsx","App.tsx","index.tsx"],"names":["styles","mapInputWidget","position","top","left","height","width","display","gridTemplateRows","zIndex","mapContainer","gridRow","mapSubmitButton","MapWrapper","props","useState","gjson","mapElement","useRef","mapRef","createMap","useCallback","mapProjection","center","transform","theMap","Map","target","layers","Tile","source","OSM","view","View","projection","zoom","controls","addDrawInteraction","layer","Vector","style","Style","stroke","Stroke","color","image","Circle","radius","fill","Fill","draw","Draw","type","modify","Modify","parsedFeatures","dataProjection","featureProjection","map","extent","padding","maxZoom","setFeaturesLayer","useEffect","initialMap","setMap","_jsxs","_jsx","ref","Button","variant","onClick","features","featuresLayer","transFeatures","feature","geometry","newFeature","geojFeatures","rightHanded","Geolocation","MapFormField","form","result","setCenter","showMap","featureType","drawnFeatures","callbackFn","theFeatures","setDrawnFeatures","setShowMap","field","className","ExampleForm","initialValues","point","polygon","linestring","onSubmit","values","actions","console","log","setSubmitting","formProps","id","name","component","JSON","stringify","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bd27b360.chunk.js","sourcesContent":["/*\n * Copyright 2021 Macquarie University\n *\n * Licensed under the Apache License Version 2.0 (the, \"License\");\n * you may not use, this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied.\n * See, the License, for the specific language governing permissions and\n * limitations under the License.\n *\n * Filename: MapWrapper.tsx\n * Description:\n *   Internals of map generation for MapFormField\n */\nimport React, { useState, useEffect, useRef, useCallback } from 'react'\n\n// openlayers\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport TileLayer from 'ol/layer/Tile'\nimport VectorLayer from 'ol/layer/Vector'\nimport VectorSource from 'ol/source/Vector'\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style'\nimport { Draw, Modify } from 'ol/interaction'\nimport OSM from 'ol/source/OSM'\nimport { Feature } from 'ol'\nimport { transform } from 'ol/proj'\n\nimport Button, { ButtonProps } from '@material-ui/core/Button'\nimport GeoJSON from 'ol/format/GeoJSON'\n\ntype FeaturesType = Feature<any>[] | undefined\ninterface MapProps extends ButtonProps {\n  features: any\n  featureType: 'Point' | 'Polygon' | 'LineString'\n  zoom: number\n  center: Array<number>\n  callbackFn: (features: FeaturesType) => void\n}\n\nconst styles = {\n  mapInputWidget: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    height: '100vh',\n    width: '100%',\n    display: 'grid',\n    gridTemplateRows: '1fr 100px',\n    zIndex: 100\n  },\n  mapContainer: {\n    gridRow: 1\n  },\n  mapSubmitButton: {\n    gridRow: 2\n  }\n} as const\n\nfunction MapWrapper(props: MapProps) {\n  // set intial state\n  const [map, setMap] = useState<Map | undefined>()\n  const [featuresLayer, setFeaturesLayer] =\n    useState<VectorLayer<VectorSource<any>>>()\n\n  const gjson = new GeoJSON()\n\n  // pull refs\n  const mapElement = useRef<HTMLDivElement>(null)\n\n  // create state ref that can be accessed in OpenLayers onclick callback function\n  //  https://stackoverflow.com/a/60643670\n  const mapRef = useRef<Map | undefined>()\n  mapRef.current = map\n\n  const createMap = useCallback(\n    (element: HTMLElement, props: MapProps): Map => {\n      const mapProjection = 'EPSG:3857'\n      const center = transform(props.center, 'EPSG:4326', mapProjection)\n\n      const theMap = new Map({\n        target: element,\n        layers: [\n          new TileLayer({ source: new OSM() })\n          // featuresLayer\n        ],\n        view: new View({\n          projection: mapProjection,\n          center: center,\n          zoom: props.zoom\n        }),\n        controls: []\n      })\n\n      theMap.getView().setCenter(center)\n\n      return theMap\n    },\n    []\n  )\n\n  const addDrawInteraction = useCallback(\n    (map: Map, props: MapProps) => {\n      const source = new VectorSource()\n\n      const layer = new VectorLayer({\n        source: source,\n        style: new Style({\n          stroke: new Stroke({\n            color: '#33ff33',\n            width: 4\n          }),\n          image: new CircleStyle({\n            radius: 7,\n            fill: new Fill({ color: '#33ff33' })\n          })\n        })\n      })\n      const draw = new Draw({\n        source: source,\n        type: props.featureType || 'Point'\n      })\n      const modify = new Modify({\n        source: source\n      })\n\n      // add features to map if we're passed any in\n      if (props.features && props.features.type) {\n        const parsedFeatures = gjson.readFeatures(props.features, {\n          dataProjection: 'EPSG:4326',\n          featureProjection: map.getView().getProjection()\n        })\n\n        source.addFeatures(parsedFeatures)\n\n        // set the view so that we can see the features\n        // but don't zoom too much\n        const extent = source.getExtent()\n        // don't fit if the extent is infinite because it crashes\n        if (!extent.includes(Infinity)) {\n          map\n            .getView()\n            .fit(extent, { padding: [20, 20, 20, 20], maxZoom: props.zoom })\n        }\n      }\n\n      // setDrawInteraction(draw)\n\n      map.addLayer(layer)\n      map.addInteraction(draw)\n      map.addInteraction(modify)\n      setFeaturesLayer(layer)\n\n      draw.on('drawstart', () => {\n        // clear any existing features if we start drawing again\n        // could allow up to a fixed number of features\n        // here by counting\n        source.clear()\n      })\n    },\n    [setFeaturesLayer]\n  )\n\n  // initialize map on first render\n  useEffect(() => {\n    // don't do this if we have already made a map\n    if (!map) {\n      // create and add vector source layer containing the passed in features\n      if (mapElement.current) {\n        // create map\n        const initialMap = createMap(mapElement.current, props)\n        addDrawInteraction(initialMap, props)\n        setMap(initialMap)\n      }\n    }\n  }, [map, createMap, addDrawInteraction, props])\n\n  const submitAction = () => {\n    if (featuresLayer) {\n      const features = featuresLayer.getSource().getFeatures()\n\n      if (map) {\n        const transFeatures: Array<Feature<any>> = []\n        features.forEach((feature) => {\n          const geometry = feature\n            .getGeometry()\n            .clone()\n            .transform(map.getView().getProjection(), 'EPSG:4326')\n          const newFeature = feature.clone()\n          newFeature.setGeometry(geometry)\n          transFeatures.push(newFeature)\n        })\n        const geojFeatures = gjson.writeFeaturesObject(transFeatures, {\n          dataProjection: 'EPSG:4326',\n          rightHanded: true\n        })\n\n        props.callbackFn(geojFeatures)\n        featuresLayer.getSource().clear()\n      }\n    }\n  }\n\n  // render component\n  return (\n    <div style={styles.mapInputWidget}>\n      <div ref={mapElement} style={styles.mapContainer} />\n      <Button\n        type='button'\n        variant='outlined'\n        color='primary'\n        style={styles.mapSubmitButton}\n        onClick={submitAction}\n      >\n        Submit\n      </Button>\n    </div>\n  )\n}\n\nexport default MapWrapper\n","/*\n * Copyright 2021 Macquarie University\n *\n * Licensed under the Apache License Version 2.0 (the, \"License\");\n * you may not use, this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied.\n * See, the License, for the specific language governing permissions and\n * limitations under the License.\n *\n * Filename: MapFormField.tsx\n * Description:\n *   Implement MapFormField for entry of data via maps in FAIMS\n */\n\nimport React, { useState } from 'react'\nimport Feature from 'ol/Feature'\nimport './MapFormField.css'\nimport MapWrapper from './MapWrapper'\nimport Button from '@material-ui/core/Button'\nimport { FieldProps } from 'formik'\n\nimport { Plugins } from '@capacitor/core'\nconst { Geolocation } = Plugins\n\ninterface MapFieldProps extends FieldProps {\n  featureType: 'Point' | 'Polygon' | 'LineString'\n  center?: Array<number>\n  zoom?: number\n}\n\nfunction MapFormField({ field, form, ...props }: MapFieldProps) {\n  const [showMap, setShowMap] = useState(false)\n  const [drawnFeatures, setDrawnFeatures] = useState<Array<Feature<any>>>([])\n\n\n  // default props.center if not defined\n  if (!props.center) {\n    props.center = [0, 0]\n  }\n  const [center, setCenter] = useState(props.center)\n\n  if (!props.zoom) {\n    props.zoom = 14\n  }\n\n  const mapCallback = (theFeatures: any) => {\n    setDrawnFeatures(theFeatures)\n    setShowMap(false)\n\n    form.setFieldValue(field.name, theFeatures)\n  }\n\n  // get the current GPS location if we're about to show the map and \n  // we have a default location\n  if (showMap) {\n    if (center[0] === 0 && center[1] === 0) {\n      Geolocation.getCurrentPosition().then((result) => {\n        setCenter([result.coords.longitude, result.coords.latitude])\n      })\n    }\n  }\n\n  // only show the map if we have a center\n  if (showMap && center[0] !== 0 && center[1] !== 0) {\n    //window.scrollTo(0, 0)\n    return (\n      <div>\n        <MapWrapper\n          featureType={props.featureType}\n          features={drawnFeatures}\n          zoom={props.zoom}\n          center={center}\n          callbackFn={mapCallback}\n        />\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <Button\n          variant='contained'\n          className='map-button'\n          onClick={() => setShowMap(true)}\n        >\n          Get {props.featureType}\n        </Button>\n      </div>\n    )\n  }\n}\n\nexport { MapFormField }\n","// @ts-ignore\nimport React from 'react';\nimport { Field, Form, Formik } from 'formik';\nimport {MapFormField} from 'faims3-map-input'\nimport Button from '@material-ui/core/Button'\nimport './ExampleForm.css'\n\nconst ExampleForm = () => {\n\n  const center = [151.21409960967713,-33.85543752567224]\n\n  return (\n      <Formik\n        initialValues={{ point: {}, polygon: {}, linestring: {} }}\n        onSubmit={(values: any, actions: any) => {\n            console.log(values)\n            actions.setSubmitting(false);\n        }}\n      >\n        {(formProps) => (\n          <div id=\"demoformcontainer\">\n            <div id=\"theform\">\n                  <h1>Test Form</h1>\n          <Form>\n            <Field name=\"point\" center={center} featureType=\"Point\" component={MapFormField} />\n\n            <Field name=\"polygon\" zoom={10} featureType=\"Polygon\" component={MapFormField} />\n\n            <Field name=\"linestring\" featureType=\"LineString\" component={MapFormField} />\n\n            <Button variant='contained' color='primary' type=\"submit\">Submit</Button>\n          </Form>\n\n            </div>\n              <div id=\"formvaluedisplay\">\n                <pre>\n                {JSON.stringify(formProps.values, null, 2)}\n                </pre>\n              </div>\n              </div>\n        )}\n      </Formik>\n)\n};\n\n\nexport default ExampleForm;","// @ts-ignore\nimport React from 'react'; \nimport './App.css';\nimport ExampleForm from './ExampleForm';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <ExampleForm />\n    </div>\n  )\n}\n\nexport default App;","import './index.css'\n\n// @ts-ignore\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}
(this["webpackJsonpfaims3-map-input-example"]=this["webpackJsonpfaims3-map-input-example"]||[]).push([[6],{272:function(e,r,t){"use strict";t.d(r,"a",(function(){return h}));var n=t(3),a=t.n(n),i=t(13),o=t(16),c=t(18);function u(e,r){var t=e.length-r,n=0;do{for(var a=r;a>0;a--)e[n+r]+=e[n],n++;t-=r}while(t>0)}function s(e,r,t){for(var n=0,a=e.length,i=a/t;a>r;){for(var o=r;o>0;--o)e[n+r]+=e[n],++n;a-=r}for(var c=e.slice(),u=0;u<i;++u)for(var s=0;s<t;++s)e[t*u+s]=c[(t-s-1)*i+u]}function f(e,r,t,n,a,i){if(!r||1===r)return e;for(var o=0;o<a.length;++o){if(a[o]%8!==0)throw new Error("When decoding with predictor, only multiple of 8 bits are supported.");if(a[o]!==a[0])throw new Error("When decoding with predictor, all samples must have the same size.")}for(var c=a[0]/8,f=2===i?1:a.length,h=0;h<n&&!(h*f*t*c>=e.byteLength);++h){var p=void 0;if(2===r){switch(a[0]){case 8:p=new Uint8Array(e,h*f*t*c,f*t*c);break;case 16:p=new Uint16Array(e,h*f*t*c,f*t*c/2);break;case 32:p=new Uint32Array(e,h*f*t*c,f*t*c/4);break;default:throw new Error("Predictor 2 not allowed with ".concat(a[0]," bits per sample."))}u(p,f)}else 3===r&&s(p=new Uint8Array(e,h*f*t*c,f*t*c),f,c)}return e}var h=function(){function e(){Object(o.a)(this,e)}return Object(c.a)(e,[{key:"decode",value:function(){var e=Object(i.a)(a.a.mark((function e(r,t){var n,i,o,c,u;return a.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,this.decodeBlock(t);case 2:if(n=e.sent,1===(i=r.Predictor||1)){e.next=9;break}return o=!r.StripOffsets,c=o?r.TileWidth:r.ImageWidth,u=o?r.TileLength:r.RowsPerStrip||r.ImageLength,e.abrupt("return",f(n,i,c,u,r.BitsPerSample,r.PlanarConfiguration));case 9:return e.abrupt("return",n);case 10:case"end":return e.stop()}}),e,this)})));return function(r,t){return e.apply(this,arguments)}}()}]),e}()},279:function(e,r,t){"use strict";t.r(r),t.d(r,"default",(function(){return c}));var n=t(16),a=t(18),i=t(24),o=t(25),c=function(e){Object(i.a)(t,e);var r=Object(o.a)(t);function t(){return Object(n.a)(this,t),r.apply(this,arguments)}return Object(a.a)(t,[{key:"decodeBlock",value:function(e){for(var r=new DataView(e),t=[],n=0;n<e.byteLength;++n){var a=r.getInt8(n);if(a<0){var i=r.getUint8(n+1);a=-a;for(var o=0;o<=a;++o)t.push(i);n+=1}else{for(var c=0;c<=a;++c)t.push(r.getUint8(n+c+1));n+=a+1}}return new Uint8Array(t).buffer}}]),t}(t(272).a)}}]);
//# sourceMappingURL=6.b710cbd9.chunk.js.map
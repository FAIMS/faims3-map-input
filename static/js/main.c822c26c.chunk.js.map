{"version":3,"sources":["../../src/MapWrapper.tsx","../../src/MapFormField.tsx","ExampleForm.tsx","App.tsx","index.tsx"],"names":["proj4","register","styles","mapInputWidget","position","top","left","height","width","display","gridTemplateRows","zIndex","mapContainer","gridRow","mapSubmitButton","MapWrapper","props","useState","defaultMapProjection","gjson","mapElement","useRef","mapRef","createMap","useCallback","a","center","transform","geoTIFFSource","GeoTIFF","sources","url","geoTiff","convertToRGB","tileLayer","WebGLTile","source","viewOptions","view","View","projection","Tile","OSM","zoom","theMap","Map","target","layers","controls","addDrawInteraction","layer","Vector","style","Style","stroke","Stroke","color","image","Circle","radius","fill","Fill","draw","Draw","type","modify","Modify","parsedFeatures","dataProjection","featureProjection","map","extent","padding","maxZoom","setFeaturesLayer","useEffect","setMap","_jsxs","_jsx","ref","Button","variant","onClick","features","featuresLayer","geojFeatures","rightHanded","Geolocation","MapFormField","form","result","setCenter","showMap","featureType","drawnFeatures","callbackFn","theFeatures","setDrawnFeatures","setShowMap","field","className","label","ExampleForm","initialValues","point","polygon","gtlinestring","linestring","onSubmit","values","actions","console","log","setSubmitting","formProps","id","name","component","process","JSON","stringify","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c822c26c.chunk.js","sourcesContent":["/*\n * Copyright 2021 Macquarie University\n *\n * Licensed under the Apache License Version 2.0 (the, \"License\");\n * you may not use, this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied.\n * See, the License, for the specific language governing permissions and\n * limitations under the License.\n *\n * Filename: MapWrapper.tsx\n * Description:\n *   Internals of map generation for MapFormField\n */\nimport React, { useState, useEffect, useRef, useCallback } from 'react'\n\n// openlayers\nimport Map from 'ol/Map'\nimport View from 'ol/View'\nimport TileLayer from 'ol/layer/Tile'\nimport WebGLTileLayer from 'ol/layer/WebGLTile'\nimport GeoTIFF from 'ol/source/GeoTIFF'\nimport VectorLayer from 'ol/layer/Vector'\nimport VectorSource from 'ol/source/Vector'\nimport { Circle as CircleStyle, Fill, Stroke, Style } from 'ol/style'\nimport { Draw, Modify } from 'ol/interaction'\nimport OSM from 'ol/source/OSM'\nimport { Feature } from 'ol'\nimport { transform } from 'ol/proj'\nimport proj4 from 'proj4';\nimport { register } from 'ol/proj/proj4'\n\nimport Button, { ButtonProps } from '@material-ui/core/Button'\nimport GeoJSON from 'ol/format/GeoJSON'\n\n\n// define some EPSG codes - these are for two sample images\n// TODO: we need to have a better way to include a useful set or allow \n// them to be defined by a project\n// e.g. https://www.npmjs.com/package/epsg-index\nproj4.defs('EPSG:32636', '+proj=utm +zone=36 +datum=WGS84 +units=m +no_defs')\nproj4.defs(\n  'EPSG:28354',\n  '+proj=utm +zone=54 +south +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'\n)\nregister(proj4)\n\n\ntype FeaturesType = Feature<any>[] | undefined\ninterface MapProps extends ButtonProps {\n  features: any\n  geoTiff?: string\n  projection?: string\n  featureType: 'Point' | 'Polygon' | 'LineString'\n  zoom: number\n  center: Array<number>\n  callbackFn: (features: FeaturesType) => void\n}\n\nconst styles = {\n  mapInputWidget: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    height: '100vh',\n    width: '100%',\n    display: 'grid',\n    gridTemplateRows: '1fr 100px',\n    zIndex: 100\n  },\n  mapContainer: {\n    gridRow: 1\n  },\n  mapSubmitButton: {\n    gridRow: 2\n  }\n} as const\n\nfunction MapWrapper(props: MapProps) {\n  // set intial state\n  const [map, setMap] = useState<Map | undefined>()\n  const [featuresLayer, setFeaturesLayer] =\n    useState<VectorLayer<VectorSource<any>>>()\n  const defaultMapProjection = 'EPSG:3857'\n  const gjson = new GeoJSON()\n\n  // pull refs\n  const mapElement = useRef<HTMLDivElement>(null)\n\n  // create state ref that can be accessed in OpenLayers onclick callback function\n  //  https://stackoverflow.com/a/60643670\n  const mapRef = useRef<Map | undefined>()\n  mapRef.current = map\n\n  const createMap = useCallback(\n    async (element: HTMLElement, props: MapProps): Promise<Map> => {\n      const center = transform(\n        props.center,\n        'EPSG:4326',\n        props.projection || defaultMapProjection\n      )\n      let tileLayer: TileLayer<any>\n      let view: View\n\n      if (props.geoTiff) {\n        const geoTIFFSource = new GeoTIFF({\n          sources: [\n            {\n              url: props.geoTiff\n            }\n          ],\n          convertToRGB: true\n        })\n        tileLayer = new WebGLTileLayer({ source: geoTIFFSource })\n        const viewOptions = await geoTIFFSource.getView()\n        // if the geoTiff doesn't have projection info we \n        // need to set it from the props or it will default to EPSG:3857\n        // can't see a way to test the geoTIFF image so we just set the\n        // projection if it has been passed in via the props\n        if (props.projection) {\n          view = new View({ ...viewOptions, projection: props.projection })\n        } else {\n          view = new View(viewOptions)\n        }\n      } else {\n        tileLayer = new TileLayer({ source: new OSM() })\n        view = new View({\n          projection: props.projection || defaultMapProjection,\n          center: center,\n          zoom: props.zoom\n        })\n      }\n\n      const theMap = new Map({\n        target: element,\n        layers: [tileLayer],\n        view: view,\n        controls: []\n      })\n\n      theMap.getView().setCenter(center)\n\n      return theMap\n    },\n    []\n  )\n\n  const addDrawInteraction = useCallback(\n    (map: Map, props: MapProps) => {\n      const source = new VectorSource()\n\n      const layer = new VectorLayer({\n        source: source,\n        style: new Style({\n          stroke: new Stroke({\n            color: '#33ff33',\n            width: 4\n          }),\n          image: new CircleStyle({\n            radius: 7,\n            fill: new Fill({ color: '#33ff33' })\n          })\n        })\n      })\n      const draw = new Draw({\n        source: source,\n        type: props.featureType || 'Point'\n      })\n      const modify = new Modify({\n        source: source\n      })\n\n      // add features to map if we're passed any in\n      if (props.features && props.features.type) {\n        const parsedFeatures = gjson.readFeatures(props.features, {\n          dataProjection: 'EPSG:4326',\n          featureProjection: map.getView().getProjection()\n        })\n        source.addFeatures(parsedFeatures)\n\n        // set the view so that we can see the features\n        // but don't zoom too much\n        const extent = source.getExtent()\n        // don't fit if the extent is infinite because it crashes\n        if (!extent.includes(Infinity)) {\n          map\n            .getView()\n            .fit(extent, { padding: [20, 20, 20, 20], maxZoom: props.zoom })\n        }\n      }\n\n      // setDrawInteraction(draw)\n\n      map.addLayer(layer)\n      map.addInteraction(draw)\n      map.addInteraction(modify)\n      setFeaturesLayer(layer)\n\n      draw.on('drawstart', () => {\n        // clear any existing features if we start drawing again\n        // could allow up to a fixed number of features\n        // here by counting\n        source.clear()\n      })\n    },\n    [setFeaturesLayer]\n  )\n\n  // initialize map on first render\n  useEffect(() => {\n    // don't do this if we have already made a map\n    if (!map) {\n      // create and add vector source layer containing the passed in features\n      if (mapElement.current) {\n        // create map\n        createMap(mapElement.current, props).then((theMap: Map) => {\n          addDrawInteraction(theMap, props)\n          setMap(theMap)\n        })\n      }\n    }\n  }, [map, createMap, addDrawInteraction, props])\n\n  const submitAction = () => {\n    if (featuresLayer) {\n      const features = featuresLayer.getSource().getFeatures()\n\n      if (map) {\n        const geojFeatures = gjson.writeFeaturesObject(features, {\n          featureProjection: map.getView().getProjection(),\n          dataProjection: 'EPSG:4326',\n          rightHanded: true\n        })\n\n        props.callbackFn(geojFeatures)\n        featuresLayer.getSource().clear()\n      }\n    }\n  }\n\n  // render component\n  return (\n    <div style={styles.mapInputWidget}>\n      <div ref={mapElement} style={styles.mapContainer} />\n      <Button\n        type='button'\n        variant='outlined'\n        color='primary'\n        style={styles.mapSubmitButton}\n        onClick={submitAction}\n      >\n        Submit\n      </Button>\n    </div>\n  )\n}\n\nexport default MapWrapper\n","/*\n * Copyright 2021 Macquarie University\n *\n * Licensed under the Apache License Version 2.0 (the, \"License\");\n * you may not use, this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing software\n * distributed under the License is distributed on an \"AS IS\" BASIS\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND either express or implied.\n * See, the License, for the specific language governing permissions and\n * limitations under the License.\n *\n * Filename: MapFormField.tsx\n * Description:\n *   Implement MapFormField for entry of data via maps in FAIMS\n */\n\nimport React, { useState } from 'react'\nimport Feature from 'ol/Feature'\nimport './MapFormField.css'\nimport MapWrapper from './MapWrapper'\nimport Button from '@material-ui/core/Button'\nimport { FieldProps } from 'formik'\n\nimport { Plugins } from '@capacitor/core'\nconst { Geolocation } = Plugins\n\ninterface MapFieldProps extends FieldProps {\n  label?: string\n  featureType: 'Point' | 'Polygon' | 'LineString'\n  geoTiff?: string\n  projection?: string\n  center?: Array<number>\n  zoom?: number\n}\n\nfunction MapFormField({ field, form, ...props }: MapFieldProps) {\n  const [showMap, setShowMap] = useState(false)\n  const [drawnFeatures, setDrawnFeatures] = useState<Array<Feature<any>>>([])\n\n\n  // default props.center if not defined\n  if (!props.center) {\n    props.center = [0, 0]\n  }\n  const [center, setCenter] = useState(props.center)\n\n  if (!props.zoom) {\n    props.zoom = 14\n  }\n\n  if (!props.label) {\n    props.label = `Get ${props.featureType}`\n  }\n\n  const mapCallback = (theFeatures: any) => {\n    setDrawnFeatures(theFeatures)\n    setShowMap(false)\n\n    form.setFieldValue(field.name, theFeatures)\n  }\n\n  // get the current GPS location if we're about to show the map and \n  // we have a default location\n  if (showMap) {\n    if (center[0] === 0 && center[1] === 0) {\n      Geolocation.getCurrentPosition().then((result) => {\n        setCenter([result.coords.longitude, result.coords.latitude])\n      })\n    }\n  }\n\n  // only show the map if we have a center\n  if (showMap && center[0] !== 0 && center[1] !== 0) {\n    //window.scrollTo(0, 0)\n    return (\n      <div>\n        <MapWrapper\n          featureType={props.featureType}\n          features={drawnFeatures}\n          zoom={props.zoom}\n          center={center}\n          callbackFn={mapCallback}\n          geoTiff={props.geoTiff}\n          projection={props.projection}\n        />\n      </div>\n    )\n  } else {\n    return (\n      <div>\n        <Button\n          variant='contained'\n          className='map-button'\n          onClick={() => setShowMap(true)}\n        >\n          {props.label}\n        </Button>\n      </div>\n    )\n  }\n}\n\nexport { MapFormField }\n","// @ts-ignore\nimport React from 'react';\nimport { Field, Form, Formik } from 'formik';\nimport {MapFormField} from 'faims3-map-input'\nimport Button from '@material-ui/core/Button'\nimport './ExampleForm.css'\n\nconst ExampleForm = () => {\n\n  const center = [151.21409960967713,-33.85543752567224]\n  const geoTiffNoProjection = process.env.PUBLIC_URL + '/tif1.tif'\n  const geoTiffProjection = 'EPSG:28354'\n  const geoTiffURL = 'https://sentinel-cogs.s3.us-west-2.amazonaws.com/sentinel-s2-l2a-cogs/2020/S2A_36QWD_20200701_0_L2A/TCI.tif'\n\n  return (\n      <Formik\n        initialValues={{ point: {}, polygon: {}, gtlinestring: {}, linestring: {} }}\n\n        onSubmit={(values: any, actions: any) => {\n            console.log(values)\n            actions.setSubmitting(false)\n        }}\n      >\n        {(formProps) => (\n          <div id=\"demoformcontainer\">\n            <div id=\"theform\">\n                  <h1>Test Form</h1>\n          <Form>\n            <p>Point, default map, defined center.</p>\n            <Field name=\"point\" center={center} featureType=\"Point\" component={MapFormField} />\n\n            <p>Polygon, local basemap with projection defined explicitly, no center defined.</p>\n            <Field name=\"polygon\" \n                label=\"Polygon GeoTiff no Projection\"\n                geoTiff={geoTiffNoProjection}\n                projection={geoTiffProjection}\n                featureType=\"Polygon\" \n                component={MapFormField} />\n            <p>Linestring, no center defined.</p>\n            <Field name=\"linestring\"  featureType=\"LineString\" component={MapFormField} />\n\n            <p>Linestring, basemap from remote URL, basemap defines projection, center defined.</p>\n            <Field name=\"gtlinestring\" \n                   label=\"Get Linestring with Geotiff\" \n                   geoTiff={geoTiffURL}\n                   center={center}\n                   featureType=\"LineString\" component={MapFormField} />\n\n\n            <Button variant='contained' color='primary' type=\"submit\">Submit</Button>\n          </Form>\n\n            </div>\n              <div id=\"formvaluedisplay\">\n                <pre>\n                {JSON.stringify(formProps.values, null, 2)}\n                </pre>\n              </div>\n              </div>\n        )}\n      </Formik>\n)\n};\n\n\nexport default ExampleForm;","// @ts-ignore\nimport React from 'react'; \nimport './App.css';\nimport ExampleForm from './ExampleForm';\n\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <ExampleForm />\n    </div>\n  )\n}\n\nexport default App;","import './index.css'\n\n// @ts-ignore\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}